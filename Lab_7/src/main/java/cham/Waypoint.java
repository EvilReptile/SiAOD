package cham;

/**
 * This class represents a single step in a path generated by the A* pathfinding
 * algorithm.  Waypoints consist of a location, the previous waypoint in the
 * path, and some cost values used to determine the best path.
 **/
public class Waypoint
{
    /** The location of this waypoint. **/
    Location loc;

    /**
     * Предыдущая путевая точка в этом пути или <code> null </ code>, если это
     * корень поиска A *.
     **/
    Waypoint prevWaypoint;

    /**
     * В этом поле хранится общая предыдущая стоимость получения от стартовой
     * местоположение до этой путевой точки, через цепочку путевых точек. Это
     * фактическая стоимость следования по пути; это не включает никаких оценок.
     **/
    private float prevCost;

    /**
     * В этом поле хранится оценка оставшейся стоимости поездки из
     * эта путевая точка до конечного пункта назначения.
     **/
    private float remainingCost;


    /**
     * Построить новую путевую точку для указанного местоположения. Предыдущая путевая точка
     * необязательно может быть указан, или ссылка может быть <code> null </ code> на
     * указывает, что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Возвращает местоположение путевой точки. **/
    public Location getLocation()
    {
        return loc;
    }
    
    /**
     * Возвращает предыдущую путевую точку в пути или <code> null </ code>, если это
     * это начало пути.
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }
    
    /**
     * Этот мутатор позволяет использовать как предыдущую, так и оставшуюся стоимость
     * устанавливается в одном вызове метода. Обычно эти значения будут установлены одинаково
     * время в любом случае.
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Возвращает фактическую стоимость достижения этой точки с самого начала
     * местоположение, через ряд точек в этой цепочке.
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     * Возвращает оценку оставшейся стоимости проезда от этого
     * указать на конечный пункт назначения.
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /**
     * Возвращает общую стоимость оценки для этой путевой точки. Это включает в себя
     * фактическая стоимость проезда к этой точке из начальной точки плюс
     * оценка оставшейся стоимости проезда от этого пункта до
     * пункт назначения.
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}
